//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 11.0.50727.1
// 
namespace metroapp.MyHealthCheckService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/HealthMonitorWCF")]
    public partial class Category : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CategoryIdField;
        
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Items", Namespace="http://schemas.datacontract.org/2004/07/HealthMonitorWCF")]
    public partial class Items : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CaloriesField;
        
        private int CategoryIdField;
        
        private string ItemValueField;
        
        private int ItemsIdField;
        
        private string QuantityValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Calories {
            get {
                return this.CaloriesField;
            }
            set {
                if ((this.CaloriesField.Equals(value) != true)) {
                    this.CaloriesField = value;
                    this.RaisePropertyChanged("Calories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemValue {
            get {
                return this.ItemValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemValueField, value) != true)) {
                    this.ItemValueField = value;
                    this.RaisePropertyChanged("ItemValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ItemsId {
            get {
                return this.ItemsIdField;
            }
            set {
                if ((this.ItemsIdField.Equals(value) != true)) {
                    this.ItemsIdField = value;
                    this.RaisePropertyChanged("ItemsId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuantityValue {
            get {
                return this.QuantityValueField;
            }
            set {
                if ((object.ReferenceEquals(this.QuantityValueField, value) != true)) {
                    this.QuantityValueField = value;
                    this.RaisePropertyChanged("QuantityValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyHealthCheckService.IHealthMonitor")]
    public interface IHealthMonitor {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHealthMonitor/GetCategories", ReplyAction="http://tempuri.org/IHealthMonitor/GetCategoriesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<metroapp.MyHealthCheckService.Category>> GetCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHealthMonitor/GetItemsByItem", ReplyAction="http://tempuri.org/IHealthMonitor/GetItemsByItemResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<metroapp.MyHealthCheckService.Items>> GetItemsByItemAsync(string item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHealthMonitor/GetQuantityAndCalorieByItem", ReplyAction="http://tempuri.org/IHealthMonitor/GetQuantityAndCalorieByItemResponse")]
        System.Threading.Tasks.Task<metroapp.MyHealthCheckService.Items> GetQuantityAndCalorieByItemAsync(string item);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHealthMonitorChannel : metroapp.MyHealthCheckService.IHealthMonitor, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HealthMonitorClient : System.ServiceModel.ClientBase<metroapp.MyHealthCheckService.IHealthMonitor>, metroapp.MyHealthCheckService.IHealthMonitor {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public HealthMonitorClient() : 
                base(HealthMonitorClient.GetDefaultBinding(), HealthMonitorClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IHealthMonitor.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public HealthMonitorClient(EndpointConfiguration endpointConfiguration) : 
                base(HealthMonitorClient.GetBindingForEndpoint(endpointConfiguration), HealthMonitorClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public HealthMonitorClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(HealthMonitorClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public HealthMonitorClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(HealthMonitorClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public HealthMonitorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<metroapp.MyHealthCheckService.Category>> GetCategoriesAsync() {
            return base.Channel.GetCategoriesAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<metroapp.MyHealthCheckService.Items>> GetItemsByItemAsync(string item) {
            return base.Channel.GetItemsByItemAsync(item);
        }
        
        public System.Threading.Tasks.Task<metroapp.MyHealthCheckService.Items> GetQuantityAndCalorieByItemAsync(string item) {
            return base.Channel.GetQuantityAndCalorieByItemAsync(item);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IHealthMonitor)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IHealthMonitor)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:9164/HealthMonitor.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return HealthMonitorClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IHealthMonitor);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return HealthMonitorClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IHealthMonitor);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IHealthMonitor,
        }
    }
}
